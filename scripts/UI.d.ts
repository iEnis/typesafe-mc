import type { State } from "@clack/core";
export declare const colorString = "magenta";
declare const colorMap: {
    readonly fg: import("picocolors/types.js").Formatter;
    readonly bg: import("picocolors/types.js").Formatter;
    readonly black: import("picocolors/types.js").Formatter;
    readonly dim: import("picocolors/types.js").Formatter;
    readonly bold: import("picocolors/types.js").Formatter;
    readonly green: import("picocolors/types.js").Formatter;
    readonly reset: import("picocolors/types.js").Formatter;
    readonly red: import("picocolors/types.js").Formatter;
    readonly bgRed: import("picocolors/types.js").Formatter;
    readonly yellow: import("picocolors/types.js").Formatter;
    readonly white: import("picocolors/types.js").Formatter;
    readonly bgYellow: import("picocolors/types.js").Formatter;
    readonly bgWhite: import("picocolors/types.js").Formatter;
};
type colorList = keyof typeof colorMap;
export declare function color(color: colorList | colorList[], ...text: string[]): string;
export declare const symbols: {
    readonly done: "◇";
    readonly current: "◆";
    readonly bar: "│";
    readonly topBar: "┌";
    readonly bottomBar: "└";
    readonly confirmSelected: "●";
    readonly confirmUnselected: "○";
    readonly multiselectSelected: "◼";
    readonly multiselectUnselected: "◻";
    readonly cancel: "■";
    readonly error: "▲";
    readonly cross: "✗";
    readonly check: "✓︎";
    readonly info: "i";
};
type symbolsList = keyof typeof symbols;
export declare function colorSymbol(symbol: symbolsList, ...colors: colorList[]): string;
export declare function displayUI(state: State, message: string, hint: string, displayedText: string[], output: string, error?: string): string;
export {};
